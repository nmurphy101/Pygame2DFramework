

Major:
1. Working Main menu - DONE
2. Working pause menu - DONE
3. Working settings menu - DONE
    a. connected to a config file - DONE
4. Data structure for objects to optimize collision checking and spawning
    a. "Windows" -> "Chunks" -> "tiles"
5. Optimize collision checks to be more generic instead of specific so
   other objects can get their collisions checked. - DONE
6. Player AI -> Minor #9, #10, #11, #15 - WIP
7. additional settings
    - Volume control - DONE
    - Window size control
8. More advanced collision logic for entity interactions
    - like not just killing the other obj when colliding
9. Code optimizations
    - Make sure slow things like loading is done only once.
    - Replace "if elif" logic with "dict.get()" where possible as seen here:
        - https://towardsdatascience.com/dictionary-as-an-alternative-to-if-else-76fe57a1e4af
    - Impliment "dirty rect animation" for faster rendering seen here:
        - https://www.pygame.org/docs/tut/newbieguide.html
    - Look into integrating OpenGL rendering for hardware acceleration


Minor:
9. immobile enemies
    a. "walls" for future level design
    b. explosive mine
10. moving enemies - WIP
    a. Situational enemy
    b. Hostile enemy
    c. Passive enemy - Done
11. shooting enemies
    a. Only does damage to hit section (tail segment or head)
    b. loose part of tail for taking damage
    c. die if hit in the head
12. consumable-items/pick-ups in level
13. Level design
    a. Win condition to get to next level (probably reach a certain score)
    b. window shifts towards the direction of the edge of the window the player
       goes.
    c. level generated with different "scenes"/"windows" as tiles connected.
        i. Procedual generation of levels
14. Environmental effects - WIP
    a. wormhole/teleportation to different areas/challenges
        i. Teleport to other portal - DONE
15. AI needs upgrade
    a. AI can be improved by a few things:
        i. Utilize diagonal movement
        ii. Utilize teleporters
        iii. increase sight
        iv. Better logic for not locking self in a tail cage
        v. increase speed
        vi. increase growth amount
    b. AI can be handicaped by a few things:
        i. decrease speed
        ii. decrease growth amount
        iii. Disalow teleporters
        iv. decrease sight
    c. Add more complex target acquisition
        i. to deal with multiple primary targets - DONE
        ii. to situationally deal with a secondary target - DONE
        iii. Make current sightlines into actionlines and remake sightlines
             to be used for calculated decisions


Bugs:
1. Food was able to spawn onto a portal/tail... That's not right...
2. The game slows down after awhile with more tail segments fix performance issues
3. As a player holding two directions at once can have you move diagonally
   through a enemy thus appearing to "phase" through them without dying...





Notes:
https://github.com/ranjian0/A-star-Pathfinding/blob/master/core/graph.py
https://www.codementor.io/blog/basic-pathfinding-explained-with-python-5pil8767c1
https://en.wikipedia.org/wiki/A*_search_algorithm
