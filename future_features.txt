

Major:
1. Working Main menu - DONE
2. Working pause menu - DONE
3. Working settings menu - DONE
    a. connected to a config file - DONE
4. Data structure for objects to optimize collision checking and spawning
    a. "Windows" -> "Chunks" -> "tiles"
5. Optimize collision checks to be more generic instead of specific so
   other objects can get their collisions checked. - DONE
6. Player AI -> Minor #9, #10, #11, #15 - WIP
7. additional settings
    - Volume control - DONE
    - Window size control
8. More advanced collision logic for entity interactions - WIP
    - like not just killing the other obj when colliding
9. Code optimizations - WIP
    - Make sure slow things like loading is done only once. - DONE
    - Replace "if elif" logic with "dict.get()" where possible as seen here: - DONE
        - https://towardsdatascience.com/dictionary-as-an-alternative-to-if-else-76fe57a1e4af
        - Make sure this is actually faster when the temp dict with lambdas have to constantly be remade...
    - Impliment "dirty rect animation" for faster rendering seen here: - Maybe
        - https://www.pygame.org/docs/tut/newbieguide.html
    - Impliment list comprehensions like this: - NO
        - https://www.python.org/dev/peps/pep-0202/
    - Look into integrating OpenGL rendering for hardware acceleration - WIP Maybe...
10. Test the ai by making a maze for it to solve
11. Impliment a stack obj for the menu "history"/navigation for consistant
    functionality for the esc key or mouse click on a button
12. Make the game speed/logic dependent on the game timer not game frames - DONE
13. Child handling improvement - DONE
    - Instead of moving each child in a train, move only the last child to the front where the head was last - DONE


Minor:
9. immobile enemies
    a. "walls" for future level design
    b. explosive mine
    c. AOE turret on a visible timerxxx
10. moving enemies - WIP
    a. Situational enemy
    b. Hostile enemy
    c. Passive enemy - Done
11. shooting enemies
    a. Only does damage to hit section (tail segment or head)
    b. loose part of tail for taking damage
    c. die if hit in the head
12. consumable-items/pick-ups in level - WIP
    a. food/score-increasing item - DONE
    b. ????
13. Level design
    a. Win condition to get to next level (probably reach a certain score)
    b. window shifts towards the direction of the edge of the window the player
       goes.
    c. level generated with different "scenes"/"windows" as tiles connected.
        i. Procedual generation of levels
14. Environmental effects - WIP
    a. wormhole/teleportation to different areas/challenges
        i. Teleport to other portal - DONE
        ii. Teleport to other areas
        iii. Teleport to challenge
    b. ???
15. AI needs upgrade
    a. AI can be improved by a few things:
        i. Utilize diagonal movement
        ii. Utilize teleporters
        iii. increase sight
        iv. Better logic for not locking self in a tail cage
        v. increase speed
        vi. increase growth amount
    b. AI can be handicaped by a few things:
        i. decrease speed
        ii. decrease growth amount
        iii. Disalow teleporters
        iv. decrease sight
    c. Add more complex target acquisition
        i. to deal with multiple primary targets - DONE
        ii. to situationally deal with a secondary target - DONE
        iii. Make current sightlines into actionlines and remake sightlines
             to be used for calculated decisions
16. Abstract Raw input
    a. ex. left instead of "K_LEFT". So keybindings can be changed later
             to be used for calculated decisions or use the

Future Ideas:
1. impliment coyote-time for precision user inputs as seen here or input buffering:
    - https://developer.amazon.com/blogs/appstore/post/9d2094ed-53cb-4a3a-a5cf-c7f34bca6cd3/coding-imprecise-controls-to-make-them-feel-more-precise
    - though I already have input buffering every frame


Bugs:
1. can you move diagonally anymore????
2. As a player holding two directions at once can have you move diagonally
   through a enemy thus appearing to "phase" through them without dying...
3. Seems like the last tail segment isn't always the correct one to grab
    which must be why some random tail segments sometimes vanish before they should...
    - actually caused by the snake running over previous tail segments without dying
4. FPS suffers when in a video call for some reason...
   - might have to do with the sounds trying to be played?



Notes:
https://github.com/ranjian0/A-star-Pathfinding/blob/master/core/graph.py
https://www.codementor.io/blog/basic-pathfinding-explained-with-python-5pil8767c1
https://en.wikipedia.org/wiki/A*_search_algorithm


https://stackoverflow.com/questions/41637139/choppy-animation-in-pygame
https://stackoverflow.com/questions/37780639/bullet-object-has-no-attribute-sprite-g-when-adding-sprite-to-group/37785640

https://gamedev.stackexchange.com/questions/185928/delta-time-with-discrete-movement


Work on improving the ai with diagonal sight lines implimented so it doesn't kill itself
as easily as it does now.

Then work on further optimizing from profileold_2
